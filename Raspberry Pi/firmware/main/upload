#! /bin/bash
# Upload firmware to the Arduino connected to this system
# Called from the Arduino IDE on a remote computer

# This receives all passed parameters from Arduino IDE
# Local values to set local configuration for this system 
# override IDE parameters by putting local values last

# Note user running this script must be a member of the following linux groups
# gpio - to allow the reset pins and similar to be controlled
# spi - if SPI programming is used
# dialout - if stk500v2 programming is used

# Local configuration

LOGFILE="/firmware/main/logfile"		# Where is the log file 
HEXFILE="/firmware/main/firmware.hex" 	# Name of the .hex file to be programmed
MINSIZE=10000 				            # Minimum expected size of the firmware file
RESETPIN=24				                # Which pin is used to reset the Arduino
SERIALPORT="/dev/ttyACM0"               # Which Serial port are we using


## Functions 
# reset the Arduino, its driven by an open collector pin , so it needs a toggle
function resetarduino {
    if [ ! -e /sys/class/gpio/gpio$RESETPIN ] ; then
        echo $RESETPIN > /sys/class/gpio/export
        sleep 0.1
    fi

    echo Resetting Arduino ...
    echo high > /sys/class/gpio/gpio$RESETPIN/direction
    sleep 0.01
    echo low  > /sys/class/gpio/gpio$RESETPIN/direction
}

# Main code
echo Last Firmware Upload : | tee $LOGFILE
date | tee -a $LOGFILE
echo Arguments are $@ >> $LOGFILE

# Check that the user ID is in the correct groups  GPIO and SPI, or is a root equivalent 
INGROUP=`groups`
# First check for ordinary users, then for administrative user - either is OK
if [[ ! $INGROUP =~ spi ]] || [[ ! $INGROUP =~ dialout ]] || [[ ! $INGROUP =~ gpio ]] ; then
	if [ "$(id -u)" != "0" ] ; then
		echo User does not have required SPI and GPIO access	| tee -a $LOGFILE
		echo Unable to execute application correctly      	| tee -a $LOGFILE
		exit
	fi
fi

# Check that the uploaded file is fresh and exists
FILEMODSEC=`stat --format=%Y "$HEXFILE"` 	# Get the current file modified time
MINAGE=$(( `date +%s` -1800 ))			# File should be less than 30 mins old = 30 x 60 = 1800 seconds

if [ ! -e "$HEXFILE" ] || [ $FILEMODSEC -lt $MINAGE ] ; then
	echo Hex file does not exist, or is not a recent upload | tee -a $LOGFILE
	echo Cowardly refusing to program it automatically      | tee -a $LOGFILE
	exit
fi

# Check if the file size looks appropriate, to prevent a bad upload
FILESIZE=`stat -c%s "$HEXFILE"`			# Get the file size
if [ $FILESIZE -lt $MINSIZE ] ; then
	echo File size of hex file looks too small to be sensible \($FILESIZE bytes\) | tee -a $LOGFILE
	echo Cowardly refusing to program it automatically        | tee -a $LOGFILE
	exit
fi

ps cax | grep minicom
if [ $? -eq 0 ] ; then
  echo Minicom is currently running, seral upload port in use ??
  echo please close minicom to continue
  while [ $? -eq 0 ] ; do
    sleep 1
    ps cax | grep minicom
  done
  sleep 1
  echo Minicom closed .. continuing
fi

# Reset the Arduino so that we know its in a state that can do updates
resetarduino

# We are good to upload the file, so program it
echo Upload command is : | tee -a $LOGFILE
# Command line to be used - Select programming method below

# For an SPI upload use this command (user must be in spi group)
#CMD="$@ -C /usr/local/etc/avrdude.conf -c linuxspi -P /dev/spidev0.0 -s"

# For an stk500v2 upload use this command (user must be in dialout group)
CMD="$@ -C /usr/local/etc/avrdude.conf -c stk500v2 -P $SERIALPORT -b115200 -s"

echo /usr/local/bin/avrdude $CMD   | tee -a $LOGFILE
/usr/local/bin/avrdude $CMD   2>&1 | tee -a $LOGFILE 

# Return overall state of AvrDuDE to the main IDE
if [ $? != 0 ] ; then
	echo avrdude Returned Error code $?	| tee -a $LOGFILE
else 
	echo avrdude Returned Success     	| tee -a $LOGFILE
fi

resetarduino

# Close the SSH session so the IDE knows we're done
exit

